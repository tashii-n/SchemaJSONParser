# Generated by Django 5.1.1 on 2025-01-17 05:53

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AgentInvitations',
            fields=[
                ('connectioninvitation', models.TextField(db_column='connectionInvitation')),
                ('multiuse', models.BooleanField(db_column='multiUse')),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.IntegerField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.IntegerField(db_column='lastChangedBy')),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('recipientkey', models.TextField(blank=True, db_column='recipientKey', null=True)),
                ('invitationdid', models.TextField(blank=True, db_column='invitationDid', null=True)),
            ],
            options={
                'db_table': 'agent_invitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Agents',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('name', models.TextField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'agents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AgentsType',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('agent', models.CharField(max_length=500)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'agents_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('state_code', models.TextField()),
                ('country_code', models.TextField()),
            ],
            options={
                'db_table': 'cities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CloudWalletUserInfo',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('label', models.TextField(blank=True, null=True)),
                ('tenantid', models.TextField(blank=True, db_column='tenantId', null=True)),
                ('email', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('type', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('agentapikey', models.TextField(blank=True, db_column='agentApiKey', null=True)),
                ('agentendpoint', models.TextField(blank=True, db_column='agentEndpoint', null=True)),
                ('key', models.TextField(blank=True, null=True)),
                ('connectionimageurl', models.TextField(blank=True, db_column='connectionImageUrl', null=True)),
            ],
            options={
                'db_table': 'cloud_wallet_user_info',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Connections',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('connectionid', models.TextField(db_column='connectionId', unique=True)),
                ('state', models.TextField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('theirlabel', models.TextField(db_column='theirLabel')),
            ],
            options={
                'db_table': 'connections',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
            options={
                'db_table': 'countries',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CredentialDefinition',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('credentialdefinitionid', models.CharField(db_column='credentialDefinitionId', max_length=500)),
                ('tag', models.CharField(max_length=500)),
                ('schemaledgerid', models.CharField(db_column='schemaLedgerId', max_length=500)),
                ('revocable', models.BooleanField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'credential_definition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('connectionid', models.TextField(blank=True, db_column='connectionId', null=True)),
                ('threadid', models.TextField(db_column='threadId', unique=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('credentialexchangeid', models.TextField(db_column='credentialExchangeId')),
                ('state', models.TextField()),
                ('schemaid', models.TextField(db_column='schemaId')),
                ('creddefid', models.TextField(db_column='credDefId')),
            ],
            options={
                'db_table': 'credentials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ecosystem',
            fields=[
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('tags', models.TextField(blank=True, null=True)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('logourl', models.TextField(blank=True, db_column='logoUrl', null=True)),
                ('autoendorsement', models.BooleanField(db_column='autoEndorsement')),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('ledgers', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ecosystem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EcosystemConfig',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.TextField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.TextField(db_column='lastChangedBy')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('key', models.TextField(blank=True, null=True)),
                ('value', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ecosystem_config',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EcosystemInvitations',
            fields=[
                ('email', models.TextField()),
                ('status', models.TextField()),
                ('userid', models.TextField(db_column='userId')),
                ('orgid', models.TextField(db_column='orgId')),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'ecosystem_invitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EcosystemOrgs',
            fields=[
                ('status', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('deploymentmode', models.TextField(blank=True, db_column='deploymentMode', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'ecosystem_orgs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EcosystemRoles',
            fields=[
                ('name', models.TextField(unique=True)),
                ('description', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ecosystem_roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EcosystemUsers',
            fields=[
                ('userid', models.TextField(db_column='userId')),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'ecosystem_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EndorsementTransaction',
            fields=[
                ('endorserdid', models.TextField(db_column='endorserDid')),
                ('authordid', models.TextField(db_column='authorDid')),
                ('requestpayload', models.TextField(db_column='requestPayload')),
                ('responsepayload', models.TextField(db_column='responsePayload')),
                ('status', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('type', models.TextField(blank=True, null=True)),
                ('requestbody', models.JSONField(blank=True, db_column='requestBody', null=True)),
                ('resourceid', models.TextField(blank=True, db_column='resourceId', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'endorsement_transaction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FileData',
            fields=[
                ('referenceid', models.TextField(blank=True, db_column='referenceId', null=True)),
                ('error', models.TextField(blank=True, null=True)),
                ('detailerror', models.TextField(blank=True, db_column='detailError', null=True)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('iserror', models.BooleanField(blank=True, db_column='isError', null=True)),
                ('creddefid', models.TextField(blank=True, db_column='credDefId', null=True)),
                ('schemaid', models.TextField(blank=True, db_column='schemaId', null=True)),
                ('status', models.BooleanField()),
                ('credential_data', models.JSONField(blank=True, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('credential_type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'file_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('upload_type', models.TextField(blank=True, null=True)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('credential_type', models.TextField(blank=True, null=True)),
                ('templateid', models.CharField(blank=True, db_column='templateId', max_length=500, null=True)),
            ],
            options={
                'db_table': 'file_upload',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ledgerconfig',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('details', models.JSONField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.TextField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.TextField(db_column='lastChangedBy')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'ledgerConfig',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ledgers',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('name', models.CharField(max_length=500)),
                ('networktype', models.CharField(db_column='networkType', max_length=500)),
                ('poolconfig', models.CharField(db_column='poolConfig', max_length=500)),
                ('isactive', models.BooleanField(db_column='isActive')),
                ('networkstring', models.CharField(db_column='networkString', max_length=500)),
                ('nymtxnendpoint', models.CharField(db_column='nymTxnEndpoint', max_length=500)),
                ('indynamespace', models.CharField(blank=True, db_column='indyNamespace', max_length=500, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('networkurl', models.CharField(blank=True, db_column='networkUrl', max_length=500, null=True)),
            ],
            options={
                'db_table': 'ledgers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('orgid', models.UUIDField(blank=True, db_column='orgId', null=True, unique=True)),
                ('notificationwebhook', models.TextField(blank=True, db_column='notificationWebhook', null=True)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.TextField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.TextField(db_column='lastChangedBy')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
            ],
            options={
                'db_table': 'notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrgAgents',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('orgdid', models.CharField(blank=True, db_column='orgDid', max_length=500, null=True)),
                ('verkey', models.CharField(blank=True, max_length=500, null=True)),
                ('agentendpoint', models.CharField(blank=True, db_column='agentEndPoint', max_length=500, null=True)),
                ('isdidpublic', models.BooleanField(blank=True, db_column='isDidPublic', null=True)),
                ('agentspinupstatus', models.IntegerField(blank=True, db_column='agentSpinUpStatus', null=True)),
                ('agentoptions', models.BinaryField(blank=True, db_column='agentOptions', null=True)),
                ('walletname', models.CharField(blank=True, db_column='walletName', max_length=500, null=True)),
                ('tenantid', models.TextField(blank=True, db_column='tenantId', null=True)),
                ('apikey', models.TextField(blank=True, db_column='apiKey', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('webhookurl', models.CharField(blank=True, db_column='webhookUrl', max_length=500, null=True)),
                ('diddocument', models.JSONField(blank=True, db_column='didDocument', null=True)),
            ],
            options={
                'db_table': 'org_agents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrgAgentsType',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('agent', models.CharField(max_length=500)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'org_agents_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('orgslug', models.TextField(blank=True, db_column='orgSlug', null=True, unique=True)),
                ('logourl', models.TextField(blank=True, db_column='logoUrl', null=True)),
                ('website', models.CharField(blank=True, max_length=500, null=True)),
                ('publicprofile', models.BooleanField(db_column='publicProfile')),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('clientid', models.CharField(blank=True, db_column='clientId', max_length=500, null=True)),
                ('clientsecret', models.CharField(blank=True, db_column='clientSecret', max_length=500, null=True)),
                ('idpid', models.CharField(blank=True, db_column='idpId', max_length=500, null=True)),
                ('registrationnumber', models.CharField(blank=True, db_column='registrationNumber', max_length=100, null=True)),
            ],
            options={
                'db_table': 'organisation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrgDids',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('orgid', models.UUIDField(db_column='orgId')),
                ('did', models.CharField(max_length=500)),
                ('diddocument', models.JSONField(db_column='didDocument')),
                ('isprimarydid', models.BooleanField(db_column='isPrimaryDid')),
            ],
            options={
                'db_table': 'org_dids',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrgInvitations',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('status', models.TextField()),
                ('orgroles', models.TextField(blank=True, db_column='orgRoles', null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'org_invitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrgRoles',
            fields=[
                ('name', models.TextField(unique=True)),
                ('description', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.TextField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.TextField(db_column='lastChangedBy')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'org_roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlatformConfig',
            fields=[
                ('externalip', models.CharField(db_column='externalIp', max_length=500)),
                ('username', models.CharField(max_length=500)),
                ('sgapikey', models.CharField(db_column='sgApiKey', max_length=500)),
                ('emailfrom', models.CharField(db_column='emailFrom', max_length=500)),
                ('apiendpoint', models.CharField(db_column='apiEndpoint', max_length=500)),
                ('tailsfileserver', models.CharField(db_column='tailsFileServer', max_length=500)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('createdby', models.TextField(db_column='createdBy')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('lastchangedby', models.TextField(db_column='lastChangedBy')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('inboundendpoint', models.CharField(blank=True, db_column='inboundEndpoint', max_length=500, null=True)),
            ],
            options={
                'db_table': 'platform_config',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Presentations',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('connectionid', models.TextField(blank=True, db_column='connectionId', null=True)),
                ('state', models.TextField(blank=True, null=True)),
                ('threadid', models.TextField(db_column='threadId', unique=True)),
                ('isverified', models.BooleanField(blank=True, db_column='isVerified', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('presentationid', models.TextField(blank=True, db_column='presentationId', null=True)),
                ('schemaid', models.CharField(blank=True, db_column='schemaId', max_length=500, null=True)),
                ('emailid', models.TextField(blank=True, db_column='emailId', null=True)),
            ],
            options={
                'db_table': 'presentations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PrismaMigrations',
            fields=[
                ('id', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('checksum', models.CharField(max_length=64)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('migration_name', models.CharField(max_length=255)),
                ('logs', models.TextField(blank=True, null=True)),
                ('rolled_back_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField()),
                ('applied_steps_count', models.IntegerField()),
            ],
            options={
                'db_table': '_prisma_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('name', models.CharField(max_length=500)),
                ('version', models.CharField(max_length=500)),
                ('attributes', models.TextField()),
                ('schemaledgerid', models.CharField(db_column='schemaLedgerId', max_length=500)),
                ('publisherdid', models.CharField(db_column='publisherDid', max_length=500)),
                ('issuerid', models.CharField(db_column='issuerId', max_length=500)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
                ('type', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'db_table': 'schema',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShorteningUrl',
            fields=[
                ('referenceid', models.CharField(blank=True, db_column='referenceId', max_length=50, null=True, unique=True)),
                ('type', models.CharField(blank=True, max_length=500, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('invitationpayload', models.JSONField(blank=True, db_column='invitationPayload', null=True)),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
            ],
            options={
                'db_table': 'shortening_url',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('country_code', models.TextField()),
            ],
            options={
                'db_table': 'states',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('token', models.TextField(unique=True)),
                ('createdat', models.DateTimeField(db_column='createdAt')),
                ('expiresat', models.DateTimeField(db_column='expiresAt')),
            ],
            options={
                'db_table': 'token',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('firstname', models.CharField(blank=True, db_column='firstName', max_length=500, null=True)),
                ('lastname', models.CharField(blank=True, db_column='lastName', max_length=500, null=True)),
                ('email', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('username', models.CharField(blank=True, max_length=500, null=True)),
                ('verificationcode', models.CharField(blank=True, db_column='verificationCode', max_length=500, null=True)),
                ('isemailverified', models.BooleanField(db_column='isEmailVerified')),
                ('supabaseuserid', models.CharField(blank=True, db_column='supabaseUserId', max_length=500, null=True)),
                ('clientid', models.CharField(blank=True, db_column='clientId', max_length=500, null=True)),
                ('clientsecret', models.CharField(blank=True, db_column='clientSecret', max_length=500, null=True)),
                ('profileimg', models.TextField(blank=True, db_column='profileImg', null=True)),
                ('fidouserid', models.CharField(blank=True, db_column='fidoUserId', max_length=1000, null=True)),
                ('isfidoverified', models.BooleanField(db_column='isFidoVerified')),
                ('publicprofile', models.BooleanField(db_column='publicProfile')),
                ('password', models.CharField(blank=True, max_length=500, null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('keycloakuserid', models.CharField(blank=True, db_column='keycloakUserId', max_length=500, null=True)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('action', models.TextField()),
                ('details', models.TextField()),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'user_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserCredentials',
            fields=[
                ('imageurl', models.TextField(blank=True, db_column='imageUrl', null=True)),
                ('credentialid', models.TextField(db_column='credentialId', unique=True)),
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_credentials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserDevices',
            fields=[
                ('createdatetime', models.DateTimeField(db_column='createDateTime')),
                ('lastchangeddatetime', models.DateTimeField(db_column='lastChangedDateTime')),
                ('devices', models.JSONField(blank=True, null=True)),
                ('credentialid', models.CharField(blank=True, db_column='credentialId', max_length=500, null=True, unique=True)),
                ('devicefriendlyname', models.CharField(blank=True, db_column='deviceFriendlyName', max_length=500, null=True)),
                ('deletedat', models.DateTimeField(blank=True, db_column='deletedAt', null=True)),
                ('authcounter', models.IntegerField(db_column='authCounter')),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('createdby', models.UUIDField(db_column='createdBy')),
                ('lastchangedby', models.UUIDField(db_column='lastChangedBy')),
            ],
            options={
                'db_table': 'user_devices',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserOrgDeleteActivity',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('userid', models.UUIDField(db_column='userId')),
                ('orgid', models.UUIDField(db_column='orgId')),
                ('recordtype', models.TextField(db_column='recordType')),
                ('txnmetadata', models.JSONField(db_column='txnMetadata')),
                ('deletedby', models.UUIDField(db_column='deletedBy')),
                ('deletedatetime', models.DateTimeField(db_column='deleteDateTime')),
                ('useremail', models.TextField(db_column='userEmail')),
            ],
            options={
                'db_table': 'user_org_delete_activity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserOrgRoles',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('idproleid', models.UUIDField(blank=True, db_column='idpRoleId', null=True)),
            ],
            options={
                'db_table': 'user_org_roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('role', models.TextField()),
            ],
            options={
                'db_table': 'user_role',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserRoleMapping',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'user_role_mapping',
                'managed': False,
            },
        ),
    ]
